// Generated by gencpp from file crazyswarm/LogBlock.msg
// DO NOT EDIT!


#ifndef CRAZYSWARM_MESSAGE_LOGBLOCK_H
#define CRAZYSWARM_MESSAGE_LOGBLOCK_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace crazyswarm
{
template <class ContainerAllocator>
struct LogBlock_
{
  typedef LogBlock_<ContainerAllocator> Type;

  LogBlock_()
    : topic_name()
    , frequency(0)
    , variables()  {
    }
  LogBlock_(const ContainerAllocator& _alloc)
    : topic_name(_alloc)
    , frequency(0)
    , variables(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _topic_name_type;
  _topic_name_type topic_name;

   typedef int16_t _frequency_type;
  _frequency_type frequency;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>> _variables_type;
  _variables_type variables;





  typedef boost::shared_ptr< ::crazyswarm::LogBlock_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::crazyswarm::LogBlock_<ContainerAllocator> const> ConstPtr;

}; // struct LogBlock_

typedef ::crazyswarm::LogBlock_<std::allocator<void> > LogBlock;

typedef boost::shared_ptr< ::crazyswarm::LogBlock > LogBlockPtr;
typedef boost::shared_ptr< ::crazyswarm::LogBlock const> LogBlockConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::crazyswarm::LogBlock_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::crazyswarm::LogBlock_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::crazyswarm::LogBlock_<ContainerAllocator1> & lhs, const ::crazyswarm::LogBlock_<ContainerAllocator2> & rhs)
{
  return lhs.topic_name == rhs.topic_name &&
    lhs.frequency == rhs.frequency &&
    lhs.variables == rhs.variables;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::crazyswarm::LogBlock_<ContainerAllocator1> & lhs, const ::crazyswarm::LogBlock_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace crazyswarm

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::crazyswarm::LogBlock_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::crazyswarm::LogBlock_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::crazyswarm::LogBlock_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::crazyswarm::LogBlock_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::crazyswarm::LogBlock_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::crazyswarm::LogBlock_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::crazyswarm::LogBlock_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d9325f33ff3a1ffc6b6c0323a9f9b181";
  }

  static const char* value(const ::crazyswarm::LogBlock_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd9325f33ff3a1ffcULL;
  static const uint64_t static_value2 = 0x6b6c0323a9f9b181ULL;
};

template<class ContainerAllocator>
struct DataType< ::crazyswarm::LogBlock_<ContainerAllocator> >
{
  static const char* value()
  {
    return "crazyswarm/LogBlock";
  }

  static const char* value(const ::crazyswarm::LogBlock_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::crazyswarm::LogBlock_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string topic_name\n"
"int16 frequency\n"
"string[] variables\n"
;
  }

  static const char* value(const ::crazyswarm::LogBlock_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::crazyswarm::LogBlock_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.topic_name);
      stream.next(m.frequency);
      stream.next(m.variables);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LogBlock_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::crazyswarm::LogBlock_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::crazyswarm::LogBlock_<ContainerAllocator>& v)
  {
    s << indent << "topic_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.topic_name);
    s << indent << "frequency: ";
    Printer<int16_t>::stream(s, indent + "  ", v.frequency);
    s << indent << "variables[]" << std::endl;
    for (size_t i = 0; i < v.variables.size(); ++i)
    {
      s << indent << "  variables[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.variables[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // CRAZYSWARM_MESSAGE_LOGBLOCK_H
