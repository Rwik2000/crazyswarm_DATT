// Generated by gencpp from file crazyswarm/TrajectoryPolynomialPiece.msg
// DO NOT EDIT!


#ifndef CRAZYSWARM_MESSAGE_TRAJECTORYPOLYNOMIALPIECE_H
#define CRAZYSWARM_MESSAGE_TRAJECTORYPOLYNOMIALPIECE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace crazyswarm
{
template <class ContainerAllocator>
struct TrajectoryPolynomialPiece_
{
  typedef TrajectoryPolynomialPiece_<ContainerAllocator> Type;

  TrajectoryPolynomialPiece_()
    : poly_x()
    , poly_y()
    , poly_z()
    , poly_yaw()
    , duration()  {
    }
  TrajectoryPolynomialPiece_(const ContainerAllocator& _alloc)
    : poly_x(_alloc)
    , poly_y(_alloc)
    , poly_z(_alloc)
    , poly_yaw(_alloc)
    , duration()  {
  (void)_alloc;
    }



   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _poly_x_type;
  _poly_x_type poly_x;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _poly_y_type;
  _poly_y_type poly_y;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _poly_z_type;
  _poly_z_type poly_z;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _poly_yaw_type;
  _poly_yaw_type poly_yaw;

   typedef ros::Duration _duration_type;
  _duration_type duration;





  typedef boost::shared_ptr< ::crazyswarm::TrajectoryPolynomialPiece_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::crazyswarm::TrajectoryPolynomialPiece_<ContainerAllocator> const> ConstPtr;

}; // struct TrajectoryPolynomialPiece_

typedef ::crazyswarm::TrajectoryPolynomialPiece_<std::allocator<void> > TrajectoryPolynomialPiece;

typedef boost::shared_ptr< ::crazyswarm::TrajectoryPolynomialPiece > TrajectoryPolynomialPiecePtr;
typedef boost::shared_ptr< ::crazyswarm::TrajectoryPolynomialPiece const> TrajectoryPolynomialPieceConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::crazyswarm::TrajectoryPolynomialPiece_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::crazyswarm::TrajectoryPolynomialPiece_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::crazyswarm::TrajectoryPolynomialPiece_<ContainerAllocator1> & lhs, const ::crazyswarm::TrajectoryPolynomialPiece_<ContainerAllocator2> & rhs)
{
  return lhs.poly_x == rhs.poly_x &&
    lhs.poly_y == rhs.poly_y &&
    lhs.poly_z == rhs.poly_z &&
    lhs.poly_yaw == rhs.poly_yaw &&
    lhs.duration == rhs.duration;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::crazyswarm::TrajectoryPolynomialPiece_<ContainerAllocator1> & lhs, const ::crazyswarm::TrajectoryPolynomialPiece_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace crazyswarm

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::crazyswarm::TrajectoryPolynomialPiece_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::crazyswarm::TrajectoryPolynomialPiece_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::crazyswarm::TrajectoryPolynomialPiece_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::crazyswarm::TrajectoryPolynomialPiece_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::crazyswarm::TrajectoryPolynomialPiece_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::crazyswarm::TrajectoryPolynomialPiece_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::crazyswarm::TrajectoryPolynomialPiece_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9099d336831f8a28304456aacb0d75e8";
  }

  static const char* value(const ::crazyswarm::TrajectoryPolynomialPiece_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9099d336831f8a28ULL;
  static const uint64_t static_value2 = 0x304456aacb0d75e8ULL;
};

template<class ContainerAllocator>
struct DataType< ::crazyswarm::TrajectoryPolynomialPiece_<ContainerAllocator> >
{
  static const char* value()
  {
    return "crazyswarm/TrajectoryPolynomialPiece";
  }

  static const char* value(const ::crazyswarm::TrajectoryPolynomialPiece_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::crazyswarm::TrajectoryPolynomialPiece_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#\n"
"\n"
"float32[] poly_x\n"
"float32[] poly_y\n"
"float32[] poly_z\n"
"float32[] poly_yaw\n"
"duration duration\n"
;
  }

  static const char* value(const ::crazyswarm::TrajectoryPolynomialPiece_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::crazyswarm::TrajectoryPolynomialPiece_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.poly_x);
      stream.next(m.poly_y);
      stream.next(m.poly_z);
      stream.next(m.poly_yaw);
      stream.next(m.duration);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TrajectoryPolynomialPiece_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::crazyswarm::TrajectoryPolynomialPiece_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::crazyswarm::TrajectoryPolynomialPiece_<ContainerAllocator>& v)
  {
    s << indent << "poly_x[]" << std::endl;
    for (size_t i = 0; i < v.poly_x.size(); ++i)
    {
      s << indent << "  poly_x[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.poly_x[i]);
    }
    s << indent << "poly_y[]" << std::endl;
    for (size_t i = 0; i < v.poly_y.size(); ++i)
    {
      s << indent << "  poly_y[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.poly_y[i]);
    }
    s << indent << "poly_z[]" << std::endl;
    for (size_t i = 0; i < v.poly_z.size(); ++i)
    {
      s << indent << "  poly_z[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.poly_z[i]);
    }
    s << indent << "poly_yaw[]" << std::endl;
    for (size_t i = 0; i < v.poly_yaw.size(); ++i)
    {
      s << indent << "  poly_yaw[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.poly_yaw[i]);
    }
    s << indent << "duration: ";
    Printer<ros::Duration>::stream(s, indent + "  ", v.duration);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CRAZYSWARM_MESSAGE_TRAJECTORYPOLYNOMIALPIECE_H
