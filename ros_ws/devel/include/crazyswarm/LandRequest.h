// Generated by gencpp from file crazyswarm/LandRequest.msg
// DO NOT EDIT!


#ifndef CRAZYSWARM_MESSAGE_LANDREQUEST_H
#define CRAZYSWARM_MESSAGE_LANDREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace crazyswarm
{
template <class ContainerAllocator>
struct LandRequest_
{
  typedef LandRequest_<ContainerAllocator> Type;

  LandRequest_()
    : groupMask(0)
    , height(0.0)
    , duration()  {
    }
  LandRequest_(const ContainerAllocator& _alloc)
    : groupMask(0)
    , height(0.0)
    , duration()  {
  (void)_alloc;
    }



   typedef uint8_t _groupMask_type;
  _groupMask_type groupMask;

   typedef float _height_type;
  _height_type height;

   typedef ros::Duration _duration_type;
  _duration_type duration;





  typedef boost::shared_ptr< ::crazyswarm::LandRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::crazyswarm::LandRequest_<ContainerAllocator> const> ConstPtr;

}; // struct LandRequest_

typedef ::crazyswarm::LandRequest_<std::allocator<void> > LandRequest;

typedef boost::shared_ptr< ::crazyswarm::LandRequest > LandRequestPtr;
typedef boost::shared_ptr< ::crazyswarm::LandRequest const> LandRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::crazyswarm::LandRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::crazyswarm::LandRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::crazyswarm::LandRequest_<ContainerAllocator1> & lhs, const ::crazyswarm::LandRequest_<ContainerAllocator2> & rhs)
{
  return lhs.groupMask == rhs.groupMask &&
    lhs.height == rhs.height &&
    lhs.duration == rhs.duration;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::crazyswarm::LandRequest_<ContainerAllocator1> & lhs, const ::crazyswarm::LandRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace crazyswarm

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::crazyswarm::LandRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::crazyswarm::LandRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::crazyswarm::LandRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::crazyswarm::LandRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::crazyswarm::LandRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::crazyswarm::LandRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::crazyswarm::LandRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b665b6c83a196e4774268cc26329b159";
  }

  static const char* value(const ::crazyswarm::LandRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb665b6c83a196e47ULL;
  static const uint64_t static_value2 = 0x74268cc26329b159ULL;
};

template<class ContainerAllocator>
struct DataType< ::crazyswarm::LandRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "crazyswarm/LandRequest";
  }

  static const char* value(const ::crazyswarm::LandRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::crazyswarm::LandRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 groupMask\n"
"float32 height\n"
"duration duration\n"
;
  }

  static const char* value(const ::crazyswarm::LandRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::crazyswarm::LandRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.groupMask);
      stream.next(m.height);
      stream.next(m.duration);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LandRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::crazyswarm::LandRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::crazyswarm::LandRequest_<ContainerAllocator>& v)
  {
    s << indent << "groupMask: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.groupMask);
    s << indent << "height: ";
    Printer<float>::stream(s, indent + "  ", v.height);
    s << indent << "duration: ";
    Printer<ros::Duration>::stream(s, indent + "  ", v.duration);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CRAZYSWARM_MESSAGE_LANDREQUEST_H
